from telebot import TeleBot
import buttons as bt
from geopy import Photon
import database as db
admins_group = -4661054301
geolocator = Photon(user_agent="geo_locator", timeout=10)
# db.add_product("–ë—É—Ä–≥–µ—Ä", 30000.00, "–ª—É—á—à–∏–π –±—É—Ä–≥–µ—Ä", 10, "https://www.gazeta.uz/media/img/2017/10/8NWCAY15072899796600_l.jpg")
# db.add_product("–ß–∏–∑–±—É—Ä–≥–µ—Ä", 35000.00, "–ª—É—á—à–∏–π —á–∏–∑–±—É—Ä–≥–µ—Ä", 10, "https://www.gazeta.uz/media/img/2017/10/8NWCAY15072899796600_l.jpg")
# db.add_product("–•–æ—Ç-–¥–æ–≥", 25000.00, "–ª—É—á—à–∏–π —Ö–æ—Ç-–¥–æ–≥", 0, "https://www.gazeta.uz/media/img/2017/10/8NWCAY15072899796600_l.jpg")
users = {}
# —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞—à–µ–≥–æ
bot = TeleBot(token="7630204824:AAFYX9Yfh3tg9Mg357ZvlAgHZEp-ZMfu8m0")
@bot.message_handler(commands=["start", "admin"])
def start(message):
    user_id = message.from_user.id
    checker = db.check_user(user_id)
    if checker == True:
        bot.send_message(user_id, "–ú–µ–Ω—é: ", reply_markup=bt.main_menu_bt())
    elif checker == False:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
                                  "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
        # –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø (—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–µ–º–∞ –∏–º–µ–Ω–∏)
        bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_id = message.from_user.id
    name = message.text
    print(name)
    bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
                     reply_markup=bt.phone_number_bt())
    bot.register_next_step_handler(message, get_phone, name)
def get_phone(message, name):
    user_id = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
    if message.contact:
        phone_number = message.contact.phone_number
        print(phone_number)
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é",
                         reply_markup=bt.location_bt())
        bot.register_next_step_handler(message, get_location, name, phone_number)
    # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –º–µ–Ω—é",
                         reply_markup=bt.phone_number_bt())
        bot.register_next_step_handler(message, get_phone, name)
def get_location(message, name, phone_number):
    user_id = message.from_user.id
    location = message.location
    address = geolocator.reverse((location.latitude, location.longitude)).address
    print(name, phone_number, address)
    db.add_user(name, phone_number, user_id)
    bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                              "–ú–µ–Ω—é: ", reply_markup=bt.main_menu_bt())
@bot.callback_query_handler(lambda call: call.data in ["back", "cart", "plus", "minus",
                                                       "to_cart", "back_product", "cart",
                                                       "clear_cart", "order"])
def calls(call):
    user_id = call.message.chat.id
    if call.data == "back":
        bot.send_message(user_id, "–ú–µ–Ω—é: ", reply_markup=bt.main_menu_bt())
    elif call.data == "plus":
        current_amount = users.get(user_id).get("pr_count")
        users[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(user_id, call.message.id,
                                      reply_markup=bt.plus_or_minus_in(plus_or_minus="plus",current_amount=current_amount))
    elif call.data == "minus":
        current_amount = users.get(user_id).get("pr_count")
        if current_amount > 1:
            users[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(user_id, call.message.id,
                                          reply_markup=bt.plus_or_minus_in(plus_or_minus="minus",current_amount=current_amount))
    elif call.data == "to_cart":
        db.add_to_cart(user_id, users[user_id]["pr_id"], users[user_id]["pr_name"],
                       users[user_id]["pr_price"], users[user_id]["pr_count"])
        users.pop(user_id)
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
                                  "–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?: ", reply_markup=bt.product_in(all_products))
    elif call.data == "back_product":
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ", reply_markup=bt.product_in(all_products))
    elif call.data == "cart":
        cart = db.get_user_cart(user_id)
        full_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n"
        count = 0
        total_price = 0
        for product in cart:
            count += 1
            full_text += f"{count}. {product[0]} x {product[1]} = {product[2]}\n"
            total_price += product[2]
        full_text += f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º"
        cart_info = db.get_cart_id_name(user_id)
        bot.send_message(user_id, full_text, reply_markup=bt.cart_in(cart_info))
    elif call.data == "clear_cart":
        db.delete_user_cart(user_id)
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–∫–∞–∑–∞—Ç—å?: ",
                         reply_markup=bt.product_in(all_products))
    elif call.data == "order":
        cart = db.get_user_cart(user_id)
        full_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: \n"
        count = 0
        total_price = 0
        for product in cart:
            count += 1
            full_text += f"{count}. {product[0]} x {product[1]} = {product[2]}\n"
            total_price += product[2]
        full_text += f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º"
        bot.delete_message(user_id, call.message.message_id)
        db.delete_user_cart(user_id)
        bot.send_message(admins_group, full_text)
        bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ", reply_markup=bt.main_menu_bt())



@bot.callback_query_handler(lambda call: "prod_" in call.data)
def get_prod_info(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    product_id = int(call.data.replace("prod_", ""))
    product_info = db.get_exact_product(product_id)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    users[user_id] = {"pr_id": product_id, "pr_name": product_info[0],
                      "pr_count": 1, "pr_price": product_info[1]}
    bot.send_photo(chat_id=user_id, photo=product_info[3], caption=f"{product_info[0]}\n"
                                                                   f"–¶–µ–Ω–∞: {product_info[1]} —Å—É–º\n"
                                                                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[2]}",
                   reply_markup=bt.plus_or_minus_in())
@bot.callback_query_handler(lambda call: "delete_" in call.data)
def delete_prod_cart(call):
    user_id = call.message.chat.id
    product_id = int(call.data.replace("delete_", ""))
    db.delete_exact_product_from_cart(user_id, product_id)
    cart = db.get_user_cart(user_id)
    full_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n"
    count = 0
    total_price = 0
    for product in cart:
        count += 1
        full_text += f"{count}. {product[0]} x {product[1]} = {product[2]}\n"
        total_price += product[2]
    full_text += f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º"
    cart_info = db.get_cart_id_name(user_id)
    bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                          text=full_text, reply_markup=bt.cart_in(cart_info))





@bot.message_handler(content_types=["text"])
def text_handler(message):
    print('—Å—Ä–∞–±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–æ–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º "—Ç–µ–∫—Å—Ç"')
    user_id = message.from_user.id
    if message.text == "üç¥–ú–µ–Ω—é":
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ", reply_markup=bt.product_in(all_products))
    elif message.text == "‚úçÔ∏è–û—Ç–∑—ã–≤":
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤: ")
    elif message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: ")
# –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot.infinity_polling()
